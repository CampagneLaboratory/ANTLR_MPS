package org.campagnelab.antlr.parsers;

/*Generated by MPS */

import org.antlr.ANTLRv4ParserBaseVisitor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import org.antlr.v4.runtime.misc.NotNull;
import org.antlr.ANTLRv4Parser;
import java.util.ArrayList;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.antlr.v4.runtime.tree.TerminalNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;

public class AntlrRuleVisitor extends ANTLRv4ParserBaseVisitor {
  private static final Logger LOG = LogManager.getLogger(AntlrRuleVisitor.class);
  /*package*/ SNode rule;
  /*package*/ List<SNode> rules;

  @Override
  public Object visitRules(@NotNull ANTLRv4Parser.RulesContext context) {
    super.visitRules(context);
    List<SNode> rules = new ArrayList<SNode>();
    {
      Iterator<ANTLRv4Parser.RuleSpecContext> r_it = ListSequence.fromList(context.ruleSpec()).iterator();
      ANTLRv4Parser.RuleSpecContext r_var;
      while (r_it.hasNext()) {
        r_var = r_it.next();
        ListSequence.fromList(rules).addElement((SNode) visitRuleSpec(r_var));
      }
    }

    return rules;
  }

  @Override
  public Object visitParserRuleSpec(@NotNull ANTLRv4Parser.ParserRuleSpecContext context) {
    super.visitParserRuleSpec(context);
    SNode rule = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d838L, "org.campagnelab.ANTLR.structure.ParserRule"));
    SPropertyOperations.set(rule, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), context.RULE_REF().getText());
    TerminalNode node = context.RULE_REF();
    String name = (node == null ? "no-name" : node.getText());
    if (context.ruleBlock() != null) {
      SNode rhs = (SNode) visitRuleBlock(context.ruleBlock());
      SLinkOperations.setTarget(rule, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d838L, 0x631eebe31132d844L, "rhs"), rhs);
    }
    return rule;

  }
  @Override
  public Object visitRuleBlock(@NotNull ANTLRv4Parser.RuleBlockContext context) {
    SNode block;
    if (context.ruleAltList() != null) {
      block = ((SNode) visitRuleAltList(context.ruleAltList()));
      if (block != null) {
        return block;
      }
    }
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L, "org.campagnelab.ANTLR.structure.ParserRuleBlock"));

  }
  @Override
  public Object visitLexerAltList(@NotNull ANTLRv4Parser.LexerAltListContext context) {
    super.visitLexerAltList(context);
    SNode altList = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17cd353L, "org.campagnelab.ANTLR.structure.LexerAltList"));
    List<ANTLRv4Parser.LexerAltContext> elements = context.lexerAlt();
    if (elements.size() > 0) {
      for (ANTLRv4Parser.LexerAltContext seq : ListSequence.fromList(elements)) {
        ListSequence.fromList(SLinkOperations.getChildren(altList, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17cd353L, 0x4e506a1ba17cd759L, "alternatives"))).addElement((SNode) visitLexerAlt(seq));

      }
    }
    return altList;

  }

  @Override
  public Object visitAlternative(@NotNull ANTLRv4Parser.AlternativeContext context) {
    SNode alternative = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113b458fL, "org.campagnelab.ANTLR.structure.Alternative"));
    List<ANTLRv4Parser.ElementContext> elements = context.element();
    if (elements.size() > 1) {
      SNode sequence = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d846L, "org.campagnelab.ANTLR.structure.Sequence"));
      for (ANTLRv4Parser.ElementContext seq : ListSequence.fromList(elements)) {
        ListSequence.fromList(SLinkOperations.getChildren(sequence, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d846L, 0x631eebe31132d96bL, "of"))).addElement((SNode) visitElement(seq));
      }
      SLinkOperations.setTarget(alternative, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113b458fL, 0x631eebe3113b4590L, "rhs"), sequence);
    } else {
      if (elements.size() == 1) {
        SLinkOperations.setTarget(alternative, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113b458fL, 0x631eebe3113b4590L, "rhs"), (SNode) visitElement(elements.get(0)));
      }
    }
    return alternative;
  }
  @Override
  public Object visitRuleAltList(@NotNull ANTLRv4Parser.RuleAltListContext context) {
    super.visitRuleAltList(context);
    SNode alts = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d842L, "org.campagnelab.ANTLR.structure.Alternatives"));
    SLinkOperations.getChildren(alts, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d842L, 0x631eebe31132d969L, "oneOf")).clear();
    for (ANTLRv4Parser.LabeledAltContext alt : ListSequence.fromList(context.labeledAlt())) {
      ListSequence.fromList(SLinkOperations.getChildren(alts, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d842L, 0x631eebe31132d969L, "oneOf"))).addElement((SNode) visitLabeledAlt(alt));
    }
    return alts;
  }
  @Override
  public Object visitLabeledAlt(@NotNull ANTLRv4Parser.LabeledAltContext context) {
    SNode alt = null;
    if (context.alternative() != null) {
      alt = (SNode) visitAlternative(context.alternative());
    }
    if (context.POUND() != null) {
      SPropertyOperations.set(alt, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113b458fL, 0x6d831d6acef0ba05L, "label"), context.id().getText());
      SPropertyOperations.set(alt, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113b458fL, 0x6d831d6acf051327L, "hasLabel"), "" + (true));
    }
    return alt;
  }
  @Override
  public Object visitElement(@NotNull ANTLRv4Parser.ElementContext context) {
    SNode element = null;
    if (context.ebnf() != null && context.ebnf().block() != null) {
      element = (SNode) visitEbnf(context.ebnf());
      // EBNF cannot be followed by ebnf suffix, return immediately: 
      return element;
    }
    if (context.labeledElement() != null) {
      element = (SNode) visit(context.labeledElement());
    }
    if (context.atom() != null) {
      element = (SNode) visitAtom(context.atom());
    }
    if (element != null && context.ebnfSuffix() != null) {
      addOptionalParams(element, context.ebnfSuffix());
    }
    return element;
  }
  @Override
  public Object visitAtom(@NotNull ANTLRv4Parser.AtomContext context) {
    if (context.DOT() != null) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88033f2L, "org.campagnelab.ANTLR.structure.Dot"));
    }
    if (context.terminal() != null) {
      return visitTerminal(context.terminal());
    }
    if (context.elementOptions() != null) {
      // TODO 
    }
    SNode refByName = createARef(context.getText());
    refByName = (SNode) refByName;
    return refByName;
  }
  @Override
  public Object visitLabeledElement(@NotNull ANTLRv4Parser.LabeledElementContext context) {
    SNode labeledElement = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e17b73a85L, "org.campagnelab.ANTLR.structure.LabeledElement"));
    if (context.id() != null) {
      SPropertyOperations.set(labeledElement, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), context.id().getText());
    }
    if (context.atom() != null) {
      SLinkOperations.setTarget(labeledElement, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e17b73a85L, 0x7c18b9e17b7c72fL, "element"), (SNode) visitAtom(context.atom()));
    }
    if (context.block() != null) {
      SLinkOperations.setTarget(labeledElement, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e17b73a85L, 0x7c18b9e17b7c72fL, "element"), (SNode) visitBlock(context.block()));
    }
    if (context.ASSIGN() != null) {
      SPropertyOperations.set(labeledElement, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e17b73a85L, 0x7c18b9e17ba7f13L, "operator"), "" + (Integer.parseInt(SEnumOperations.getEnumMemberValue(SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)", "LABELING_OPERATOR"), "=")))));
    }
    if (context.PLUS_ASSIGN() != null) {
      SPropertyOperations.set(labeledElement, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e17b73a85L, 0x7c18b9e17ba7f13L, "operator"), "" + (Integer.parseInt(SEnumOperations.getEnumMemberValue(SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:579fcb2d-4d1f-46c6-93f9-98775dc55169(org.campagnelab.ANTLR.structure)", "LABELING_OPERATOR"), "+=")))));
    }
    return labeledElement;
  }
  @Override
  public Object visitEbnf(@NotNull ANTLRv4Parser.EbnfContext context) {
    if (context.block() != null) {
      SNode alternatives;
      alternatives = (SNode) visitBlock(context.block());
      if (context.blockSuffix() != null) {
        if (context.blockSuffix().ebnfSuffix() != null) {
          addOptionalParams(alternatives, context.blockSuffix().ebnfSuffix());
        }
      }
      return alternatives;
    }
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d842L, "org.campagnelab.ANTLR.structure.Alternatives"));
  }
  @Override
  public Object visitRange(@NotNull ANTLRv4Parser.RangeContext context) {
    SNode range = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba93652fedL, "org.campagnelab.ANTLR.structure.Range"));
    context.getStart();
    if (context.STRING_LITERAL().size() < 1) {
      return range;
    }
    SLinkOperations.setTarget(range, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba93652fedL, 0xdb5f4ba936530dcL, "start"), createTrimmedLiteral(context.STRING_LITERAL().get(0).getText()));
    if (context.STRING_LITERAL().size() < 2) {
      return range;
    }
    SLinkOperations.setTarget(range, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba93652fedL, 0xdb5f4ba936530deL, "end"), createTrimmedLiteral(context.STRING_LITERAL().get(1).getText()));
    return range;
  }
  @Override
  public Object visitAltList(@NotNull ANTLRv4Parser.AltListContext context) {
    SNode alternatives = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d842L, "org.campagnelab.ANTLR.structure.Alternatives"));
    SLinkOperations.getChildren(alternatives, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d842L, 0x631eebe31132d969L, "oneOf")).clear();
    for (ANTLRv4Parser.AlternativeContext alt : ListSequence.fromList(context.alternative())) {
      ListSequence.fromList(SLinkOperations.getChildren(alternatives, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d842L, 0x631eebe31132d969L, "oneOf"))).addElement((SNode) visitAlternative(alt));
    }

    return alternatives;
  }
  @Override
  public Object visitBlock(@NotNull ANTLRv4Parser.BlockContext context) {
    SNode seq = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d846L, "org.campagnelab.ANTLR.structure.Sequence"));
    SNode alternatives = (SNode) visitAltList(context.altList());
    ListSequence.fromList(SLinkOperations.getChildren(seq, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d846L, 0x631eebe31132d96bL, "of"))).addElement(alternatives);
    return seq;
  }
  @Override
  public Object visitLexerRule(@NotNull ANTLRv4Parser.LexerRuleContext context) {
    super.visitLexerRule(context);
    SNode lRule = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88648b1L, "org.campagnelab.ANTLR.structure.LexerRule"));
    if (context.lexerRuleBlock() != null) {
      SLinkOperations.setTarget(lRule, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88648b1L, 0x175f2668a886ac7dL, "rhs"), (SNode) visitLexerRuleBlock(context.lexerRuleBlock()));
    }
    if (context.TOKEN_REF() != null) {
      SPropertyOperations.set(lRule, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), context.TOKEN_REF().getText());
    }
    return lRule;
  }
  @Override
  public Object visitLexerAlt(@NotNull ANTLRv4Parser.LexerAltContext context) {
    super.visitLexerAlt(context);
    SNode lexerAlt = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a8872629L, "org.campagnelab.ANTLR.structure.LexerAlt"));

    if (context.lexerElements() != null) {
      List<SNode> lexerElements = (List<SNode>) visitLexerElements(context.lexerElements());
      ListSequence.fromList(SLinkOperations.getChildren(lexerAlt, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a8872629L, 0x175f2668a887262aL, "elements"))).addSequence(ListSequence.fromList(lexerElements));
    } else {
    }
    return lexerAlt;

  }
  @Override
  public Object visitTokensSpec(@NotNull ANTLRv4Parser.TokensSpecContext context) {
    SNode spec = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e171f1505L, "org.campagnelab.ANTLR.structure.TokenSpec"));

    for (ANTLRv4Parser.IdContext id : ListSequence.fromList(context.id())) {
      SNode token = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e171f2eb3L, "org.campagnelab.ANTLR.structure.Token"));
      SPropertyOperations.set(token, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), id.getText());
      ListSequence.fromList(SLinkOperations.getChildren(spec, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e171f1505L, 0x7c18b9e171f2eb1L, "tokens"))).addElement(token);
    }
    return spec;
  }
  @Override
  public Object visitGrammarSpec(@NotNull ANTLRv4Parser.GrammarSpecContext context) {
    SNode grammar = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113222a9L, "org.campagnelab.ANTLR.structure.Grammar"));
    if (context.DOC_COMMENT() != null) {
      if (LOG.isInfoEnabled()) {
        LoggingRuntime.legacyLog(Level.INFO, "comment=" + context.DOC_COMMENT().getText(), AntlrRuleVisitor.class, null);
      }
    }
    for (ANTLRv4Parser.PrequelConstructContext prequel : ListSequence.fromList(context.prequelConstruct())) {
      if (prequel.tokensSpec() != null) {
        SLinkOperations.setTarget(grammar, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113222a9L, 0x7c18b9e171fc275L, "tokens"), (SNode) visitTokensSpec(prequel.tokensSpec()));
      }
    }
    if (context.rules() != null) {
      ListSequence.fromList(SLinkOperations.getChildren(grammar, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113222a9L, 0x631eebe31132d83bL, "rules"))).addSequence(ListSequence.fromList((List<SNode>) visitRules(context.rules())));
    }
    SPropertyOperations.set(grammar, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), context.id().getText());
    return grammar;
  }
  @Override
  public Object visitPrequelConstruct(@NotNull ANTLRv4Parser.PrequelConstructContext context) {
    if (context.tokensSpec() != null) {
      return visitTokensSpec(context.tokensSpec());
    }
    return null;
  }
  @Override
  public Object visitLexerElement(@NotNull ANTLRv4Parser.LexerElementContext context) {
    super.visitLexerElement(context);
    SNode parserRuleBlock = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba15f4aa4L, "org.campagnelab.ANTLR.structure.LexerElement"));
    if (context.lexerAtom() != null) {
      parserRuleBlock = (SNode) visitLexerAtom(context.lexerAtom());
    } else if (context.lexerBlock() != null) {
      parserRuleBlock = (SNode) visitLexerBlock(context.lexerBlock());
    }
    if (context.ebnfSuffix() != null) {
      addOptionalParams(parserRuleBlock, context.ebnfSuffix());
    }
    return parserRuleBlock;
  }
  @Override
  public Object visitLexerBlock(@NotNull ANTLRv4Parser.LexerBlockContext context) {
    SNode sequence = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x155bede063d71d12L, "org.campagnelab.ANTLR.structure.LexerBlock"));

    if (context.lexerAltList() != null) {
      ListSequence.fromList(SLinkOperations.getChildren(sequence, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x155bede063d71d12L, 0x155bede063d71d13L, "elements"))).addElement((SNode) visitLexerAltList(context.lexerAltList()));
    }
    return sequence;
  }
  @Override
  public Object visitLexerAtom(@NotNull ANTLRv4Parser.LexerAtomContext context) {
    if (context.range() != null) {
      return visitRange(context.range());
    }
    if (context.notSet() != null) {
      SNode notSet = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba9332cba7L, "org.campagnelab.ANTLR.structure.NotSet"));
      if (context.notSet().setElement() != null) {
        SLinkOperations.setTarget(notSet, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba9332cba7L, 0xdb5f4ba9332cbf4L, "set"), (SNode) visitSetElement(context.notSet().setElement()));
      }
      if (context.notSet().blockSet() != null) {
        SLinkOperations.setTarget(notSet, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba9332cba7L, 0xdb5f4ba9332cbf4L, "set"), (SNode) visitBlockSet(context.notSet().blockSet()));
      }
      return notSet;
    }
    if (context.DOT() != null) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88033f2L, "org.campagnelab.ANTLR.structure.Dot"));
    }
    if (context.terminal() != null) {
      SNode element = (SNode) visitTerminal(context.terminal());
      return element;
    }
    if (context.LEXER_CHAR_SET() != null) {
      SNode regexp = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113ea53bL, "org.campagnelab.ANTLR.structure.REGEXP"));
      SPropertyOperations.set(regexp, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113ea53bL, 0x631eebe3113ea679L, "regexp"), context.LEXER_CHAR_SET().getText());
      return regexp;
    }

    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e6560L, "org.campagnelab.ANTLR.structure.LexerToken"));
  }
  @Override
  public Object visitTerminal(@NotNull ANTLRv4Parser.TerminalContext context) {
    if (context.STRING_LITERAL() != null) {
      String litText = context.STRING_LITERAL().getText();
      return createTrimmedLiteral(litText);
    }
    if (context.TOKEN_REF() != null) {
      return createLexerRef(context.TOKEN_REF().getText());
    }
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba15f4aa4L, "org.campagnelab.ANTLR.structure.LexerElement"));
  }
  @Override
  public Object visitSetElement(@NotNull ANTLRv4Parser.SetElementContext context) {

    if (context.LEXER_CHAR_SET() != null) {
      SNode regExp = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113ea53bL, "org.campagnelab.ANTLR.structure.REGEXP"));
      SPropertyOperations.set(regExp, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113ea53bL, 0x631eebe3113ea679L, "regexp"), context.LEXER_CHAR_SET().getText());
      return regExp;
    }
    if (context.STRING_LITERAL() != null) {
      return createTrimmedLiteral(context.STRING_LITERAL().getText());
    }
    if (context.TOKEN_REF() != null) {
      return createARef(context.TOKEN_REF().getText());
    }
    if (context.range() != null) {
      return visitRange(context.range());
    }
    return null;
  }
  @Override
  public Object visitBlockSet(@NotNull ANTLRv4Parser.BlockSetContext context) {
    SNode block = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1eb5241d3a14471dL, "org.campagnelab.ANTLR.structure.BlockSet"));
    for (ANTLRv4Parser.SetElementContext element : ListSequence.fromList(context.setElement())) {
      ListSequence.fromList(SLinkOperations.getChildren(block, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1eb5241d3a14471dL, 0x1eb5241d3a155e67L, "elements"))).addElement((SNode) visitSetElement(element));
    }
    return block;
  }
  @Override
  public Object visitLexerRuleBlock(@NotNull ANTLRv4Parser.LexerRuleBlockContext context) {
    super.visitLexerRuleBlock(context);
    SNode block = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a886ac85L, "org.campagnelab.ANTLR.structure.LexerRuleBlock"));
    SLinkOperations.setTarget(block, MetaAdapterFactory.getContainmentLink(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a886ac85L, 0x175f2668a886aca6L, "alternatives"), (SNode) visitLexerAltList(context.lexerAltList()));
    return block;
  }
  @Override
  public Object visitLexerElements(@NotNull ANTLRv4Parser.LexerElementsContext context) {
    super.visitLexerElements(context);
    List<SNode> lexerElements = new ArrayList<SNode>();
    if (context.lexerElement() != null) {
      List<ANTLRv4Parser.LexerElementContext> elements = context.lexerElement();
      for (ANTLRv4Parser.LexerElementContext seq : ListSequence.fromList(elements)) {
        lexerElements.add((SNode) visitLexerElement(seq));
      }
    } else {
    }
    return lexerElements;
  }
  private void addOptionalParams(SNode currentElement, ANTLRv4Parser.EbnfSuffixContext context) {
    if (currentElement != null && context != null) {
      String question = context.getText();
      for (char c : question.toCharArray()) {
        if ('?' == c) {
          SPropertyOperations.set(currentElement, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x797c10c6e517ac38L, 0x797c10c6e517b02cL, "isOptional"), "" + (true));
        }
        if ('+' == c) {
          SPropertyOperations.set(currentElement, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x797c10c6e517ac38L, 0x797c10c6e517bcdaL, "plus"), "" + (true));
        }
        if ('*' == c) {
          SPropertyOperations.set(currentElement, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x797c10c6e517ac38L, 0x797c10c6e517bbd3L, "acceptMultiple"), "" + (true));
        }
      }
    }
  }
  public SNode createARef(String name) {
    if (Character.isLowerCase(name.charAt(0))) {
      return createRef(name);
    } else {
      return createLexerRef(name);
    }
  }
  public SNode createRef(String name) {
    SNode refByName = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1ebae6380de70d78L, "org.campagnelab.ANTLR.structure.RuleRefByName"));
    SPropertyOperations.set(refByName, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1ebae6380de70d78L, 0x1ebae6380de70d79L, "name"), name);
    return refByName;
  }
  public SNode createLexerRef(String name) {
    SNode refByName = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17206d3L, "org.campagnelab.ANTLR.structure.LexerRuleRefByName"));
    SPropertyOperations.set(refByName, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17206d3L, 0x4e506a1ba1720e58L, "name"), name);
    return refByName;
  }

  public SNode createLiteral(String value) {
    SNode literal = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e657fL, "org.campagnelab.ANTLR.structure.StringLiteral"));
    SPropertyOperations.set(literal, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e657fL, 0x631eebe3113e6580L, "literal"), value);
    return literal;
  }
  public SNode createTrimmedLiteral(String value) {
    SNode literal = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e657fL, "org.campagnelab.ANTLR.structure.StringLiteral"));
    SPropertyOperations.set(literal, MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e657fL, 0x631eebe3113e6580L, "literal"), value.subSequence(1, value.length() - 1).toString());
    return literal;
  }




}
