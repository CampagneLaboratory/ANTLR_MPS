package org.campagnelab.antlr.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.editor.runtime.cells.ReadOnlyUtil;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.campagnelab.antlr.parsers.AntlrPaster;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.EditableSModel;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.nodeEditor.EditorComponent;

public class PasteAsAntlrRules_Action extends BaseAction {
  private static final Icon ICON = null;
  public PasteAsAntlrRules_Action() {
    super("Paste ANTLR Rules", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (ReadOnlyUtil.isSelectionReadOnlyInEditor(event.getData(MPSEditorDataKeys.EDITOR_COMPONENT))) {
      return false;
    }
    return (SNodeOperations.getNodeAncestor(((SNode) event.getData(MPSCommonDataKeys.NODE)), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113222a9L, "org.campagnelab.ANTLR.structure.Grammar"), true, false) != null) && AntlrPaster.areDataAvailableInClipboard();
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      IOperationContext p = event.getData(MPSCommonDataKeys.OPERATION_CONTEXT);
      if (p == null) {
        return false;
      }
    }
    {
      SNode p = event.getData(MPSCommonDataKeys.NODE);
      if (p == null) {
        return false;
      }
    }
    {
      SModel p = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      if (p == null) {
        return false;
      }
      if (!(p instanceof EditableSModel) || p.isReadOnly()) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      EditorComponent editorComponent = event.getData(MPSEditorDataKeys.EDITOR_COMPONENT);
      if (editorComponent != null && editorComponent.isInvalid()) {
        editorComponent = null;
      }
      if (editorComponent == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    new AntlrPaster().pasteRules(event.getData(MPSCommonDataKeys.NODE), event.getData(MPSCommonDataKeys.OPERATION_CONTEXT), event.getData(MPSCommonDataKeys.MPS_PROJECT));
  }
}
