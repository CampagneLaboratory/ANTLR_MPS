package org.campagnelab.antlr.persistence.impl;

/*Generated by MPS */

import jetbrains.mps.extapi.model.EditableSModelBase;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SModelReference;
import java.io.InputStream;
import java.io.IOException;
import org.jetbrains.mps.openapi.persistence.ModelSaveException;
import org.jetbrains.annotations.Nullable;

public class ANTLR_SModel extends EditableSModelBase {
  /*package*/ OneANTLRFilePerRoot dataSource;
  /*package*/ AntlrPersistenceImpl persistence;
  private SModel myModel;

  protected ANTLR_SModel(@NotNull SModelReference reference, @NotNull OneANTLRFilePerRoot source, AntlrPersistenceImpl persistence) {
    super(reference, source);
    if (!(source instanceof OneANTLRFilePerRoot)) {
      throw new UnsupportedOperationException("DataSource must be of type OneANTLRFilePerRoot");
    } else {
      dataSource = ((OneANTLRFilePerRoot) source);
      this.persistence = persistence;
    }
  }

  protected void doUnload() {
    myModel = null;
  }
  protected void reloadContents() {
    assertCanChange();
    for (String streamName : dataSource.getAvailableStreams()) {
      InputStream is = null;
      try {
        is = dataSource.openInputStream(streamName);
        myModel = new SModel();
      } catch (IOException e) {
      } finally {
        if (is != null) {
          try {
            is.close();
          } catch (IOException e) {
          }
        }
      }
    }
  }
  protected boolean saveModel() throws IOException, ModelSaveException {
    return false;
  }
  @Deprecated
  public SModel getSModelInternal() {
    return null;
  }
  @Nullable
  protected SModel getCurrentModelInternal() {
    return null;
  }
}
