package org.campagnelab.antlr.tomps.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.campagnelab.ANTLR.behavior.Alternative_Behavior;
import org.apache.log4j.Level;
import jetbrains.mps.intentions.IntentionDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ResolveAllAlternativesById_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ResolveAllAlternativesById_Intention() {
  }
  public String getConcept() {
    return "org.campagnelab.antlr.tomps.structure.ConvertToMPS";
  }
  public String getPresentation() {
    return "ResolveAllAlternativesById";
  }
  public String getPersistentStateKey() {
    return "org.campagnelab.antlr.tomps.intentions.ResolveAllAlternativesById_Intention";
  }
  public String getLanguageFqName() {
    return "org.campagnelab.antlr.tomps";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:3172cd41-bcad-4d57-92e5-868449e54828(org.campagnelab.antlr.tomps.intentions)", "558881339895242806");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ResolveAllAlternativesById_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Resolve Alternatives by Identifier";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      ListSequence.fromList(SNodeOperations.getNodeDescendants(node, MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea606232bL, "org.campagnelab.antlr.tomps.structure.AlternativeMapper"), false, new SAbstractConcept[]{})).visitAll(new IVisitor<SNode>() {
        public void visit(final SNode altMapper) {
          if (LOG.isInfoEnabled()) {
            LOG.info("Trying to resolve altMapper with id=" + SPropertyOperations.getString(altMapper, MetaAdapterFactory.getProperty(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea606232bL, 0x7c18b9e17fff06eL, "id")));
          }
          SNode alt = ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(node, MetaAdapterFactory.getReferenceLink(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea6061b82L, 0x6a1bb02ea6061be9L, "grammar")), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113b458fL, "org.campagnelab.ANTLR.structure.Alternative"), false, new SAbstractConcept[]{})).findFirst(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return eq_5h3ye5_a0a0a0a0a0a1a0a0a0a0a2m(Alternative_Behavior.call_id_558881339894401601(it), SPropertyOperations.getString(altMapper, MetaAdapterFactory.getProperty(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea606232bL, 0x7c18b9e17fff06eL, "id")));
            }
          });
          if (alt != null) {
            SLinkOperations.setTarget(altMapper, MetaAdapterFactory.getReferenceLink(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea606232bL, 0x6a1bb02ea6062391L, "alternative"), alt);
          } else {
            if (LOG.isEnabledFor(Level.WARN)) {
              LOG.warn("not found: " + SPropertyOperations.getString(altMapper, MetaAdapterFactory.getProperty(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea606232bL, 0x7c18b9e17fff06eL, "id")));
            }
          }
        }
      });
    }
    public IntentionDescriptor getDescriptor() {
      return ResolveAllAlternativesById_Intention.this;
    }
  }
  protected static Logger LOG = LogManager.getLogger(ResolveAllAlternativesById_Intention.class);
  private static boolean eq_5h3ye5_a0a0a0a0a0a1a0a0a0a0a2m(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
