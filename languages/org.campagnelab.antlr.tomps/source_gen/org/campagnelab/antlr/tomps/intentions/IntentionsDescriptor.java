package org.campagnelab.antlr.tomps.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_hphjzv_d0f.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            // Concept: AlternativeMapper 
            intentions = new IntentionFactory[3];
            intentions[0] = new CreateConceptAndLabelsForAlt_Intention();
            intentions[1] = new CreateEditor_Intention();
            intentions[2] = new CreateTextGen_Intention();
          }
          break;
        case 1:
          if (true) {
            // Concept: ChildDestination 
            intentions = new IntentionFactory[1];
            intentions[0] = new ChildAsOperator_Intention();
          }
          break;
        case 2:
          if (true) {
            // Concept: ConceptMapper 
            intentions = new IntentionFactory[5];
            intentions[0] = new CreateConcept_Intention();
            intentions[1] = new AddAllAlternatives_Intention();
            intentions[2] = new CreateConceptAndLabels_Intention();
            intentions[3] = new CreateEditors_Intention();
            intentions[4] = new CreateTextGens_Intention();
          }
          break;
        case 3:
          if (true) {
            // Concept: ConvertToMPS 
            intentions = new IntentionFactory[5];
            intentions[0] = new ResolveAllAlternativesById_Intention();
            intentions[1] = new SortOperatorsByPriority_Intention();
            intentions[2] = new CreateOperatorConcepts_Intention();
            intentions[3] = new SwitchToOperatorNames_Intention();
            intentions[4] = new CreateOperatorTextGen_Intention();
          }
          break;
        case 4:
          if (true) {
            // Concept: Grammar 
            intentions = new IntentionFactory[1];
            intentions[0] = new RenameLabelsFromConceptsIn_Intention();
          }
          break;
        case 5:
          if (true) {
            // Concept: LexerRuleSource 
            intentions = new IntentionFactory[2];
            intentions[0] = new AddTrimCharacters_Intention();
            intentions[1] = new ForceGetText_Intention();
          }
          break;
        case 6:
          if (true) {
            // Concept: ParserRuleBlock 
            intentions = new IntentionFactory[1];
            intentions[0] = new DeclareOperator_Intention();
          }
          break;
        case 7:
          if (true) {
            // Concept: PropertyDestination 
            intentions = new IntentionFactory[1];
            intentions[0] = new PropertyAsType_Intention();
          }
          break;
        case 8:
          if (true) {
            // Concept: StringLiteral 
            intentions = new IntentionFactory[1];
            intentions[0] = new AddLabelSubconcept_Intention();
          }
          break;
        default:
          // default 
      }
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[20];
    rv[0] = new CreateConcept_Intention();
    rv[1] = new AddAllAlternatives_Intention();
    rv[2] = new ResolveAllAlternativesById_Intention();
    rv[3] = new AddLabelSubconcept_Intention();
    rv[4] = new CreateConceptAndLabels_Intention();
    rv[5] = new CreateConceptAndLabelsForAlt_Intention();
    rv[6] = new RenameLabelsFromConceptsIn_Intention();
    rv[7] = new PropertyAsType_Intention();
    rv[8] = new CreateEditors_Intention();
    rv[9] = new CreateEditor_Intention();
    rv[10] = new DeclareOperator_Intention();
    rv[11] = new SortOperatorsByPriority_Intention();
    rv[12] = new CreateOperatorConcepts_Intention();
    rv[13] = new SwitchToOperatorNames_Intention();
    rv[14] = new ChildAsOperator_Intention();
    rv[15] = new CreateTextGen_Intention();
    rv[16] = new CreateTextGens_Intention();
    rv[17] = new CreateOperatorTextGen_Intention();
    rv[18] = new AddTrimCharacters_Intention();
    rv[19] = new ForceGetText_Intention();
    return Arrays.asList(rv);
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_hphjzv_d0f = buildConceptIndices(MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea606232bL, "org.campagnelab.antlr.tomps.structure.AlternativeMapper"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x4aaf5f3861bb9099L, "org.campagnelab.antlr.tomps.structure.ChildDestination"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x69d936b00a0eba02L, "org.campagnelab.antlr.tomps.structure.ConceptMapper"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea6061b82L, "org.campagnelab.antlr.tomps.structure.ConvertToMPS"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113222a9L, "org.campagnelab.ANTLR.structure.Grammar"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6912564f422833dbL, "org.campagnelab.antlr.tomps.structure.LexerRuleSource"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L, "org.campagnelab.ANTLR.structure.ParserRuleBlock"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x27b12e38d7577b90L, "org.campagnelab.antlr.tomps.structure.PropertyDestination"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e657fL, "org.campagnelab.ANTLR.structure.StringLiteral"));
}
