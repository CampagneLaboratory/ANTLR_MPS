package org.campagnelab.antlr.tomps.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.Iterator;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Mapper__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x7c18b9e1882f81cL, "org.campagnelab.antlr.tomps.structure.Mapper");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<SNode> alternative_idv1yTSox_OX = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("alternative").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("v1yTSox_OX").registry(REGISTRY).build();
  public static final SMethod<SNode> concept_idv1yTSox$EK = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("concept").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("v1yTSox$EK").registry(REGISTRY).build();
  public static final SMethod<Void> linkDeclarationsForConceptInterface_id3xPTlDT3j4y = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("linkDeclarationsForConceptInterface").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3xPTlDT3j4y").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> someMethod_id5qM9mr9FXqp = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("someMethod").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5qM9mr9FXqp").registry(REGISTRY).build();
  public static final SMethod<List<SNode>> linkDeclarations_id3xPTlDT1UDq = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("linkDeclarations").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3xPTlDT1UDq").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> propertyDeclarationsForConceptInterface_id2uLbzznonpD = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("propertyDeclarationsForConceptInterface").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2uLbzznonpD").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<List<SNode>> propertyDeclarations_id2uLbzznonqn = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("propertyDeclarations").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2uLbzznonqn").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(alternative_idv1yTSox_OX, concept_idv1yTSox$EK, linkDeclarationsForConceptInterface_id3xPTlDT3j4y, someMethod_id5qM9mr9FXqp, linkDeclarations_id3xPTlDT1UDq, propertyDeclarationsForConceptInterface_id2uLbzznonpD, propertyDeclarations_id2uLbzznonqn);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode alternative_idv1yTSox_OX(@NotNull SNode __thisNode__) {
    return SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getNodeAncestor(__thisNode__, MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea606232bL, "org.campagnelab.antlr.tomps.structure.AlternativeMapper"), false, false), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea606232bL, "org.campagnelab.antlr.tomps.structure.AlternativeMapper")), MetaAdapterFactory.getReferenceLink(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea606232bL, 0x6a1bb02ea6062391L, "alternative"));
  }
  /*package*/ static SNode concept_idv1yTSox$EK(@NotNull SNode __thisNode__) {
    return (SNode) AlternativeMapper__BehaviorDescriptor.visitorReturnConcept_idv1yTSnUhdL.invoke(SNodeOperations.cast(SNodeOperations.getParent(__thisNode__), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea606232bL, "org.campagnelab.antlr.tomps.structure.AlternativeMapper")));
  }
  /*package*/ static void linkDeclarationsForConceptInterface_id3xPTlDT3j4y(@NotNull final SNode __thisNode__, final List<SNode> links, SNode concept) {
    ListSequence.fromList(links).addSequence(ListSequence.fromList(SLinkOperations.getChildren(concept, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6bL, "linkDeclaration"))));
    ListSequence.fromList(AbstractConceptDeclaration__BehaviorDescriptor.getImmediateSuperconcepts_idhMuxyK2.invoke(concept)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        Mapper__BehaviorDescriptor.linkDeclarationsForConceptInterface_id3xPTlDT3j4y.invoke(__thisNode__, links, it);
      }
    });
  }
  /*package*/ static void someMethod_id5qM9mr9FXqp(@NotNull SNode __thisNode__) {
    List<SNode> list = new ArrayList<SNode>();
    List<SNode> other = new ArrayList<SNode>();
    SNode example = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x4aaf5f3861a15c43L, "org.campagnelab.antlr.tomps.structure.ExampleConcept")));
    {
      Iterator<SNode> element_it = ListSequence.fromList(list).iterator();
      SNode element_var;
      while (element_it.hasNext()) {
        element_var = element_it.next();
        SNode c = element_var;
        ListSequence.fromList(SLinkOperations.getChildren(example, MetaAdapterFactory.getContainmentLink(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x4aaf5f3861a15c43L, 0x32ac4b93a7718b4L, "listChild"))).addElement(c);
      }
    }
  }
  /*package*/ static List<SNode> linkDeclarations_id3xPTlDT1UDq(@NotNull final SNode __thisNode__, SNode concept) {
    final List<SNode> links = new ArrayList<SNode>();
    do {
      ListSequence.fromList(links).addSequence(ListSequence.fromList(SLinkOperations.getChildren(concept, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6bL, "linkDeclaration"))));
      ListSequence.fromList(SLinkOperations.getChildren(concept, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x110358d693eL, "implements"))).visitAll(new IVisitor<SNode>() {
        public void visit(SNode iconcept) {
          Mapper__BehaviorDescriptor.linkDeclarationsForConceptInterface_id3xPTlDT3j4y.invoke(__thisNode__, links, SLinkOperations.getTarget(iconcept, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x110356fc618L, 0x110356fe029L, "intfc")));
        }
      });
      concept = SLinkOperations.getTarget(concept, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends"));
    } while (concept != null);
    return links;
  }
  /*package*/ static void propertyDeclarationsForConceptInterface_id2uLbzznonpD(@NotNull final SNode __thisNode__, final List<SNode> properties, SNode concept) {
    ListSequence.fromList(properties).addSequence(ListSequence.fromList(SLinkOperations.getChildren(concept, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6cL, "propertyDeclaration"))));
    ListSequence.fromList(AbstractConceptDeclaration__BehaviorDescriptor.getImmediateSuperconcepts_idhMuxyK2.invoke(concept)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        Mapper__BehaviorDescriptor.propertyDeclarationsForConceptInterface_id2uLbzznonpD.invoke(__thisNode__, properties, it);
      }
    });
  }
  /*package*/ static List<SNode> propertyDeclarations_id2uLbzznonqn(@NotNull final SNode __thisNode__, SNode concept) {
    final List<SNode> properties = new ArrayList<SNode>();
    do {
      ListSequence.fromList(properties).addSequence(ListSequence.fromList(SLinkOperations.getChildren(concept, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6cL, "propertyDeclaration"))));
      ListSequence.fromList(SLinkOperations.getChildren(concept, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x110358d693eL, "implements"))).visitAll(new IVisitor<SNode>() {
        public void visit(SNode iconcept) {
          Mapper__BehaviorDescriptor.propertyDeclarationsForConceptInterface_id2uLbzznonpD.invoke(__thisNode__, properties, SLinkOperations.getTarget(iconcept, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x110356fc618L, 0x110356fe029L, "intfc")));
        }
      });
      concept = SLinkOperations.getTarget(concept, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends"));
    } while (concept != null);
    return properties;
  }

  /*package*/ Mapper__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) alternative_idv1yTSox_OX(node));
      case 1:
        return (T) ((SNode) concept_idv1yTSox$EK(node));
      case 2:
        linkDeclarationsForConceptInterface_id3xPTlDT3j4y(node, (List<SNode>) parameters[0], (SNode) parameters[1]);
        return null;
      case 3:
        someMethod_id5qM9mr9FXqp(node);
        return null;
      case 4:
        return (T) ((List<SNode>) linkDeclarations_id3xPTlDT1UDq(node, (SNode) parameters[0]));
      case 5:
        propertyDeclarationsForConceptInterface_id2uLbzznonpD(node, (List<SNode>) parameters[0], (SNode) parameters[1]);
        return null;
      case 6:
        return (T) ((List<SNode>) propertyDeclarations_id2uLbzznonqn(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
