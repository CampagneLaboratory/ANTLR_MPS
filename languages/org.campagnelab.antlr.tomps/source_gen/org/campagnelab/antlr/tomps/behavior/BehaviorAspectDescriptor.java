package org.campagnelab.antlr.tomps.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myToOperator__BehaviorDescriptor = new ToOperator__BehaviorDescriptor();
  private final BHDescriptor myMapper__BehaviorDescriptor = new Mapper__BehaviorDescriptor();
  private final BHDescriptor myNewVisitor__BehaviorDescriptor = new NewVisitor__BehaviorDescriptor();
  private final BHDescriptor myOperator__BehaviorDescriptor = new Operator__BehaviorDescriptor();
  private final BHDescriptor myPropertyDestination__BehaviorDescriptor = new PropertyDestination__BehaviorDescriptor();
  private final BHDescriptor mySource__BehaviorDescriptor = new Source__BehaviorDescriptor();
  private final BHDescriptor myParserRuleSource__BehaviorDescriptor = new ParserRuleSource__BehaviorDescriptor();
  private final BHDescriptor myTextGenHelper__BehaviorDescriptor = new TextGenHelper__BehaviorDescriptor();
  private final BHDescriptor myToIntDestination__BehaviorDescriptor = new ToIntDestination__BehaviorDescriptor();
  private final BHDescriptor myToBooleanDestination__BehaviorDescriptor = new ToBooleanDestination__BehaviorDescriptor();
  private final BHDescriptor myToFloatDestination__BehaviorDescriptor = new ToFloatDestination__BehaviorDescriptor();
  private final BHDescriptor myLabeledElementSource__BehaviorDescriptor = new LabeledElementSource__BehaviorDescriptor();
  private final BHDescriptor myDestination__BehaviorDescriptor = new Destination__BehaviorDescriptor();
  private final BHDescriptor myChildDestination__BehaviorDescriptor = new ChildDestination__BehaviorDescriptor();
  private final BHDescriptor myLexerRuleSource__BehaviorDescriptor = new LexerRuleSource__BehaviorDescriptor();
  private final BHDescriptor myConceptMapper__BehaviorDescriptor = new ConceptMapper__BehaviorDescriptor();
  private final BHDescriptor myConvertToMPS__BehaviorDescriptor = new ConvertToMPS__BehaviorDescriptor();
  private final BHDescriptor myAlternativeMapper__BehaviorDescriptor = new AlternativeMapper__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0v.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myAlternativeMapper__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myChildDestination__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myConceptMapper__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myConvertToMPS__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myDestination__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myLabeledElementSource__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myLexerRuleSource__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myMapper__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myNewVisitor__BehaviorDescriptor;
          }
          break;
        case 9:
          if (true) {
            return myOperator__BehaviorDescriptor;
          }
          break;
        case 10:
          if (true) {
            return myParserRuleSource__BehaviorDescriptor;
          }
          break;
        case 11:
          if (true) {
            return myPropertyDestination__BehaviorDescriptor;
          }
          break;
        case 12:
          if (true) {
            return mySource__BehaviorDescriptor;
          }
          break;
        case 13:
          if (true) {
            return myTextGenHelper__BehaviorDescriptor;
          }
          break;
        case 14:
          if (true) {
            return myToBooleanDestination__BehaviorDescriptor;
          }
          break;
        case 15:
          if (true) {
            return myToFloatDestination__BehaviorDescriptor;
          }
          break;
        case 16:
          if (true) {
            return myToIntDestination__BehaviorDescriptor;
          }
          break;
        case 17:
          if (true) {
            return myToOperator__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0v = buildConceptIndices(MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea606232bL, "org.campagnelab.antlr.tomps.structure.AlternativeMapper"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x4aaf5f3861bb9099L, "org.campagnelab.antlr.tomps.structure.ChildDestination"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x69d936b00a0eba02L, "org.campagnelab.antlr.tomps.structure.ConceptMapper"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6a1bb02ea6061b82L, "org.campagnelab.antlr.tomps.structure.ConvertToMPS"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x4aaf5f3861bb9098L, "org.campagnelab.antlr.tomps.structure.Destination"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x4aaf5f3861adfe77L, "org.campagnelab.antlr.tomps.structure.LabeledElementSource"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6912564f422833dbL, "org.campagnelab.antlr.tomps.structure.LexerRuleSource"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x7c18b9e1882f81cL, "org.campagnelab.antlr.tomps.structure.Mapper"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x11106e6008e38ee7L, "org.campagnelab.antlr.tomps.structure.NewVisitor"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x195a5f84d619bfbdL, "org.campagnelab.antlr.tomps.structure.Operator"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x3875e55a78eeb7feL, "org.campagnelab.antlr.tomps.structure.ParserRuleSource"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x27b12e38d7577b90L, "org.campagnelab.antlr.tomps.structure.PropertyDestination"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x3875e55a78eeb7ddL, "org.campagnelab.antlr.tomps.structure.Source"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x3ec2bbae1a5cc460L, "org.campagnelab.antlr.tomps.structure.TextGenHelper"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x443e8c43ffcc4608L, "org.campagnelab.antlr.tomps.structure.ToBooleanDestination"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x443e8c43ffcf6763L, "org.campagnelab.antlr.tomps.structure.ToFloatDestination"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x443e8c43ffc0edbfL, "org.campagnelab.antlr.tomps.structure.ToIntDestination"), MetaAdapterFactory.getConcept(0x932d719ce93144d5L, 0x990ce115f79b5942L, 0x6c9855e848a0c58L, "org.campagnelab.antlr.tomps.structure.ToOperator"));
}
