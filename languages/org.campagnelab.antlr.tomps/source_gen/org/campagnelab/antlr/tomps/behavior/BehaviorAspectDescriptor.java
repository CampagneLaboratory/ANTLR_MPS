package org.campagnelab.antlr.tomps.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myToOperator__BehaviorDescriptor = new ToOperator__BehaviorDescriptor();
  private final BHDescriptor myMapper__BehaviorDescriptor = new Mapper__BehaviorDescriptor();
  private final BHDescriptor myNewVisitor__BehaviorDescriptor = new NewVisitor__BehaviorDescriptor();
  private final BHDescriptor myOperator__BehaviorDescriptor = new Operator__BehaviorDescriptor();
  private final BHDescriptor myPropertyDestination__BehaviorDescriptor = new PropertyDestination__BehaviorDescriptor();
  private final BHDescriptor mySource__BehaviorDescriptor = new Source__BehaviorDescriptor();
  private final BHDescriptor myParserRuleSource__BehaviorDescriptor = new ParserRuleSource__BehaviorDescriptor();
  private final BHDescriptor myTextGenHelper__BehaviorDescriptor = new TextGenHelper__BehaviorDescriptor();
  private final BHDescriptor myToIntDestination__BehaviorDescriptor = new ToIntDestination__BehaviorDescriptor();
  private final BHDescriptor myToBooleanDestination__BehaviorDescriptor = new ToBooleanDestination__BehaviorDescriptor();
  private final BHDescriptor myToFloatDestination__BehaviorDescriptor = new ToFloatDestination__BehaviorDescriptor();
  private final BHDescriptor myLabeledElementSource__BehaviorDescriptor = new LabeledElementSource__BehaviorDescriptor();
  private final BHDescriptor myDestination__BehaviorDescriptor = new Destination__BehaviorDescriptor();
  private final BHDescriptor myChildDestination__BehaviorDescriptor = new ChildDestination__BehaviorDescriptor();
  private final BHDescriptor myLexerRuleSource__BehaviorDescriptor = new LexerRuleSource__BehaviorDescriptor();
  private final BHDescriptor myConceptMapper__BehaviorDescriptor = new ConceptMapper__BehaviorDescriptor();
  private final BHDescriptor myConvertToMPS__BehaviorDescriptor = new ConvertToMPS__BehaviorDescriptor();
  private final BHDescriptor myAlternativeMapper__BehaviorDescriptor = new AlternativeMapper__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[18];
    myConceptBehaviorIds[0] = 0x6c9855e848a0c58L;
    myConceptBehaviorIds[1] = 0x7c18b9e1882f81cL;
    myConceptBehaviorIds[2] = 0x11106e6008e38ee7L;
    myConceptBehaviorIds[3] = 0x195a5f84d619bfbdL;
    myConceptBehaviorIds[4] = 0x27b12e38d7577b90L;
    myConceptBehaviorIds[5] = 0x3875e55a78eeb7ddL;
    myConceptBehaviorIds[6] = 0x3875e55a78eeb7feL;
    myConceptBehaviorIds[7] = 0x3ec2bbae1a5cc460L;
    myConceptBehaviorIds[8] = 0x443e8c43ffc0edbfL;
    myConceptBehaviorIds[9] = 0x443e8c43ffcc4608L;
    myConceptBehaviorIds[10] = 0x443e8c43ffcf6763L;
    myConceptBehaviorIds[11] = 0x4aaf5f3861adfe77L;
    myConceptBehaviorIds[12] = 0x4aaf5f3861bb9098L;
    myConceptBehaviorIds[13] = 0x4aaf5f3861bb9099L;
    myConceptBehaviorIds[14] = 0x6912564f422833dbL;
    myConceptBehaviorIds[15] = 0x69d936b00a0eba02L;
    myConceptBehaviorIds[16] = 0x6a1bb02ea6061b82L;
    myConceptBehaviorIds[17] = 0x6a1bb02ea606232bL;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myToOperator__BehaviorDescriptor;
      case 1:
        return myMapper__BehaviorDescriptor;
      case 2:
        return myNewVisitor__BehaviorDescriptor;
      case 3:
        return myOperator__BehaviorDescriptor;
      case 4:
        return myPropertyDestination__BehaviorDescriptor;
      case 5:
        return mySource__BehaviorDescriptor;
      case 6:
        return myParserRuleSource__BehaviorDescriptor;
      case 7:
        return myTextGenHelper__BehaviorDescriptor;
      case 8:
        return myToIntDestination__BehaviorDescriptor;
      case 9:
        return myToBooleanDestination__BehaviorDescriptor;
      case 10:
        return myToFloatDestination__BehaviorDescriptor;
      case 11:
        return myLabeledElementSource__BehaviorDescriptor;
      case 12:
        return myDestination__BehaviorDescriptor;
      case 13:
        return myChildDestination__BehaviorDescriptor;
      case 14:
        return myLexerRuleSource__BehaviorDescriptor;
      case 15:
        return myConceptMapper__BehaviorDescriptor;
      case 16:
        return myConvertToMPS__BehaviorDescriptor;
      case 17:
        return myAlternativeMapper__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
