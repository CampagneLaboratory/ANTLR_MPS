package org.campagnelab.ANTLR.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class ToTextOutput__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L, "org.campagnelab.ANTLR.structure.ToTextOutput");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<String> toText_id4UG6ID2UsRv = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("toText").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4UG6ID2UsRv").registry(REGISTRY).build();
  public static final SMethod<String> safeToText_id69QR58bs5XX = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("safeToText").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("69QR58bs5XX").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<String> safeName_id11fp6sihb8e = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("safeName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("11fp6sihb8e").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<String> safeString_id11fp6sihd5f = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("safeString").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("11fp6sihd5f").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(toText_id4UG6ID2UsRv, safeToText_id69QR58bs5XX, safeName_id11fp6sihb8e, safeString_id11fp6sihd5f);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String safeToText_id69QR58bs5XX(@NotNull SNode __thisNode__, SNode toTextOutput) {
    if (toTextOutput != null) {
      return ToTextOutput__BehaviorDescriptor.toText_id4UG6ID2UsRv.invoke(toTextOutput);
    } else {
      return "";
    }
  }
  /*package*/ static String safeName_id11fp6sihb8e(@NotNull SNode __thisNode__, String name) {
    return ((String) ToTextOutput__BehaviorDescriptor.safeString_id11fp6sihd5f.invoke(__thisNode__, "name", name));
  }
  /*package*/ static String safeString_id11fp6sihd5f(@NotNull SNode __thisNode__, String kind, String value) {
    return (value == null ? "/*<no-" + kind + ">*/" : value);
  }

  /*package*/ ToTextOutput__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 1:
        return (T) ((String) safeToText_id69QR58bs5XX(node, (SNode) parameters[0]));
      case 2:
        return (T) ((String) safeName_id11fp6sihb8e(node, (String) parameters[0]));
      case 3:
        return (T) ((String) safeString_id11fp6sihd5f(node, (String) parameters[0], (String) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
