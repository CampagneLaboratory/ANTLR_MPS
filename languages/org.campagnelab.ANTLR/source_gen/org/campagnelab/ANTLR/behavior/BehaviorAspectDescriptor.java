package org.campagnelab.ANTLR.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myTokenRef__BehaviorDescriptor = new TokenRef__BehaviorDescriptor();
  private final BHDescriptor myLabeledElement__BehaviorDescriptor = new LabeledElement__BehaviorDescriptor();
  private final BHDescriptor myNotSet__BehaviorDescriptor = new NotSet__BehaviorDescriptor();
  private final BHDescriptor myRange__BehaviorDescriptor = new Range__BehaviorDescriptor();
  private final BHDescriptor myLexerBlock__BehaviorDescriptor = new LexerBlock__BehaviorDescriptor();
  private final BHDescriptor myDot__BehaviorDescriptor = new Dot__BehaviorDescriptor();
  private final BHDescriptor myRule__BehaviorDescriptor = new Rule__BehaviorDescriptor();
  private final BHDescriptor myLexerRule__BehaviorDescriptor = new LexerRule__BehaviorDescriptor();
  private final BHDescriptor myLexerRuleBlock__BehaviorDescriptor = new LexerRuleBlock__BehaviorDescriptor();
  private final BHDescriptor myLexerAlt__BehaviorDescriptor = new LexerAlt__BehaviorDescriptor();
  private final BHDescriptor myLexerRuleRef__BehaviorDescriptor = new LexerRuleRef__BehaviorDescriptor();
  private final BHDescriptor myBlockSet__BehaviorDescriptor = new BlockSet__BehaviorDescriptor();
  private final BHDescriptor myParentheses__BehaviorDescriptor = new Parentheses__BehaviorDescriptor();
  private final BHDescriptor myRuleRefByName__BehaviorDescriptor = new RuleRefByName__BehaviorDescriptor();
  private final BHDescriptor myLexerRuleRefByName__BehaviorDescriptor = new LexerRuleRefByName__BehaviorDescriptor();
  private final BHDescriptor myLexerAltList__BehaviorDescriptor = new LexerAltList__BehaviorDescriptor();
  private final BHDescriptor myToTextOutput__BehaviorDescriptor = new ToTextOutput__BehaviorDescriptor();
  private final BHDescriptor myGrammar__BehaviorDescriptor = new Grammar__BehaviorDescriptor();
  private final BHDescriptor myParserRule__BehaviorDescriptor = new ParserRule__BehaviorDescriptor();
  private final BHDescriptor myAlternatives__BehaviorDescriptor = new Alternatives__BehaviorDescriptor();
  private final BHDescriptor myParserRuleBlock__BehaviorDescriptor = new ParserRuleBlock__BehaviorDescriptor();
  private final BHDescriptor mySequence__BehaviorDescriptor = new Sequence__BehaviorDescriptor();
  private final BHDescriptor myParserRuleRef__BehaviorDescriptor = new ParserRuleRef__BehaviorDescriptor();
  private final BHDescriptor myAlternative__BehaviorDescriptor = new Alternative__BehaviorDescriptor();
  private final BHDescriptor myLexerToken__BehaviorDescriptor = new LexerToken__BehaviorDescriptor();
  private final BHDescriptor myStringLiteral__BehaviorDescriptor = new StringLiteral__BehaviorDescriptor();
  private final BHDescriptor myREGEXP__BehaviorDescriptor = new REGEXP__BehaviorDescriptor();
  private final BHDescriptor myHasOptionalParams__BehaviorDescriptor = new HasOptionalParams__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0fb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myAlternative__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myAlternatives__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myBlockSet__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myDot__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myGrammar__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myHasOptionalParams__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myLabeledElement__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myLexerAlt__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myLexerAltList__BehaviorDescriptor;
          }
          break;
        case 9:
          if (true) {
            return myLexerBlock__BehaviorDescriptor;
          }
          break;
        case 10:
          if (true) {
            return myLexerRule__BehaviorDescriptor;
          }
          break;
        case 11:
          if (true) {
            return myLexerRuleBlock__BehaviorDescriptor;
          }
          break;
        case 12:
          if (true) {
            return myLexerRuleRef__BehaviorDescriptor;
          }
          break;
        case 13:
          if (true) {
            return myLexerRuleRefByName__BehaviorDescriptor;
          }
          break;
        case 14:
          if (true) {
            return myLexerToken__BehaviorDescriptor;
          }
          break;
        case 15:
          if (true) {
            return myNotSet__BehaviorDescriptor;
          }
          break;
        case 16:
          if (true) {
            return myParentheses__BehaviorDescriptor;
          }
          break;
        case 17:
          if (true) {
            return myParserRule__BehaviorDescriptor;
          }
          break;
        case 18:
          if (true) {
            return myParserRuleBlock__BehaviorDescriptor;
          }
          break;
        case 19:
          if (true) {
            return myParserRuleRef__BehaviorDescriptor;
          }
          break;
        case 20:
          if (true) {
            return myREGEXP__BehaviorDescriptor;
          }
          break;
        case 21:
          if (true) {
            return myRange__BehaviorDescriptor;
          }
          break;
        case 22:
          if (true) {
            return myRule__BehaviorDescriptor;
          }
          break;
        case 23:
          if (true) {
            return myRuleRefByName__BehaviorDescriptor;
          }
          break;
        case 24:
          if (true) {
            return mySequence__BehaviorDescriptor;
          }
          break;
        case 25:
          if (true) {
            return myStringLiteral__BehaviorDescriptor;
          }
          break;
        case 26:
          if (true) {
            return myToTextOutput__BehaviorDescriptor;
          }
          break;
        case 27:
          if (true) {
            return myTokenRef__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0fb = buildConceptIndices(MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113b458fL, "org.campagnelab.ANTLR.structure.Alternative"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d842L, "org.campagnelab.ANTLR.structure.Alternatives"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1eb5241d3a14471dL, "org.campagnelab.ANTLR.structure.BlockSet"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88033f2L, "org.campagnelab.ANTLR.structure.Dot"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113222a9L, "org.campagnelab.ANTLR.structure.Grammar"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x797c10c6e517ac38L, "org.campagnelab.ANTLR.structure.HasOptionalParams"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e17b73a85L, "org.campagnelab.ANTLR.structure.LabeledElement"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a8872629L, "org.campagnelab.ANTLR.structure.LexerAlt"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17cd353L, "org.campagnelab.ANTLR.structure.LexerAltList"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x155bede063d71d12L, "org.campagnelab.ANTLR.structure.LexerBlock"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88648b1L, "org.campagnelab.ANTLR.structure.LexerRule"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a886ac85L, "org.campagnelab.ANTLR.structure.LexerRuleBlock"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a890ef9eL, "org.campagnelab.ANTLR.structure.LexerRuleRef"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4e506a1ba17206d3L, "org.campagnelab.ANTLR.structure.LexerRuleRefByName"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e6560L, "org.campagnelab.ANTLR.structure.LexerToken"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba9332cba7L, "org.campagnelab.ANTLR.structure.NotSet"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1ebae6380de529f8L, "org.campagnelab.ANTLR.structure.Parentheses"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d838L, "org.campagnelab.ANTLR.structure.ParserRule"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L, "org.campagnelab.ANTLR.structure.ParserRuleBlock"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d966L, "org.campagnelab.ANTLR.structure.ParserRuleRef"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113ea53bL, "org.campagnelab.ANTLR.structure.REGEXP"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0xdb5f4ba93652fedL, "org.campagnelab.ANTLR.structure.Range"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x175f2668a88648aaL, "org.campagnelab.ANTLR.structure.Rule"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x1ebae6380de70d78L, "org.campagnelab.ANTLR.structure.RuleRefByName"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d846L, "org.campagnelab.ANTLR.structure.Sequence"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe3113e657fL, "org.campagnelab.ANTLR.structure.StringLiteral"), MetaAdapterFactory.getInterfaceConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x4eac1aea42e9c6e8L, "org.campagnelab.ANTLR.structure.ToTextOutput"), MetaAdapterFactory.getConcept(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x7c18b9e172f3f03L, "org.campagnelab.ANTLR.structure.TokenRef"));
}
