package org.campagnelab.ANTLR.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Alternative = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Alternatives = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BlockSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Dot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Grammar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HasOptionalParams = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LabeledElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LexerAlt = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LexerAltList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LexerBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LexerElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LexerRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LexerRuleBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LexerRuleRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LexerRuleRefByName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LexerToken = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Parentheses = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParserRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParserRuleBlock = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L, 0x631eebe3113c4245L, "isOptional_old"), MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L, 0x631eebe3113c4247L, "acceptMultiple_old"), MetaAdapterFactory.getProperty(0xd6782141eafa4cf7L, 0xa85d1229abdb1152L, 0x631eebe31132d843L, 0x72827882b897b9d5L, "plus_old")).create();
  private final ConceptPresentation props_ParserRuleRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_REGEXP = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Range = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Rule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RuleRefByName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Sequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SetElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToTextOutput = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Token = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TokenRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TokenSpec = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Alternative;
      case 1:
        return props_Alternatives;
      case 2:
        return props_BlockSet;
      case 3:
        return props_Dot;
      case 4:
        return props_Grammar;
      case 5:
        return props_HasOptionalParams;
      case 6:
        return props_LabeledElement;
      case 7:
        return props_LexerAlt;
      case 8:
        return props_LexerAltList;
      case 9:
        return props_LexerBlock;
      case 10:
        return props_LexerElement;
      case 11:
        return props_LexerRule;
      case 12:
        return props_LexerRuleBlock;
      case 13:
        return props_LexerRuleRef;
      case 14:
        return props_LexerRuleRefByName;
      case 15:
        return props_LexerToken;
      case 16:
        return props_NotSet;
      case 17:
        return props_Parentheses;
      case 18:
        return props_ParserRule;
      case 19:
        return props_ParserRuleBlock;
      case 20:
        return props_ParserRuleRef;
      case 21:
        return props_REGEXP;
      case 22:
        return props_Range;
      case 23:
        return props_Rule;
      case 24:
        return props_RuleRefByName;
      case 25:
        return props_Sequence;
      case 26:
        return props_SetElement;
      case 27:
        return props_StringLiteral;
      case 28:
        return props_ToTextOutput;
      case 29:
        return props_Token;
      case 30:
        return props_TokenRef;
      case 31:
        return props_TokenSpec;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
