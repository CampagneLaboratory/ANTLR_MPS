package org.campagnelab.metar.R.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SPropertyId;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;

public class BinaryOperator_Constraints extends BaseConstraintsDescriptor {
  public BinaryOperator_Constraints() {
    super(MetaIdFactory.conceptId(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L));
  }
  @Override
  protected Map<SPropertyId, PropertyConstraintsDescriptor> getNotDefaultSProperties() {
    Map<SPropertyId, PropertyConstraintsDescriptor> properties = new HashMap<SPropertyId, PropertyConstraintsDescriptor>();
    properties.put(MetaIdFactory.propId(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, 0x33dd14ec70a93d43L), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, 0x33dd14ec70a93d43L), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "operator";
        {
          String[] valid = {"&", "&&", "|", "||", "<-", "=", "->", "<<-", "->>", "==", "<=", "<", ">", ">=", "!=", "*", "+", "-"};
          // 
          for (String keyword : valid) {
            return true;
          }
          return false;
        }
      }
    });
    return properties;
  }
}
