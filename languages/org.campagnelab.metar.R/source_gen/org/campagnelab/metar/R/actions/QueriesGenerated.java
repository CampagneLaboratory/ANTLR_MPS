package org.campagnelab.metar.R.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.campagnelab.metar.R.behavior.Identifier_Behavior;
import jetbrains.mps.smodel.action.NodeSubstitutePreconditionContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.Computable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.regex.Pattern;

public class QueriesGenerated {
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Identifier_4765240346572622418(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52acL, "org.campagnelab.metar.R.structure.FunctionCallExpr").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode functionCall = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52acL, "org.campagnelab.metar.R.structure.FunctionCallExpr")));
            SLinkOperations.setTarget(functionCall, MetaAdapterFactory.getContainmentLink(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52acL, 0x33dd14ec70cfd7b4L, "id"), _context.getCurrentTargetNode());
            return SNodeOperations.replaceWithAnother(_context.getCurrentTargetNode(), functionCall);
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            if (!(SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(), MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52b7L, "org.campagnelab.metar.R.structure.Identifier")))) {
              return false;
            }
            return (Identifier_Behavior.call_matchingFunction_4765240346572628991(_context.getCurrentTargetNode()) != null);
          }
          public String getMatchingText(String pattern) {
            return "(";
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_Identifier_4765240346572622420(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return !(SNodeOperations.isInstanceOf(_context.getCurrentTargetNode(), MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x67233316ad3ba88dL, "org.campagnelab.metar.R.structure.FunctionIdRef")));
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expr_4765240346579844871(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52bcL, "org.campagnelab.metar.R.structure.ComplexLiteralExpr").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode complex = SNodeFactoryOperations.createNewNode(model, SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52bcL, "org.campagnelab.metar.R.structure.ComplexLiteralExpr")), null);
            try {
              SPropertyOperations.set(complex, MetaAdapterFactory.getProperty(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52bcL, 0x422188d90f4e71baL, "value"), pattern);
            } catch (NumberFormatException e) {
              SPropertyOperations.set(complex, MetaAdapterFactory.getProperty(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52bcL, 0x422188d90f4e71baL, "value"), "0i");
            }
            return complex;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            return REGEXP_x583g4_a0a0a2a0a0a0a2a0a1a2.matcher(pattern).matches();
          }
          public String getMatchingText(String pattern) {
            return pattern;
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52bbL, "org.campagnelab.metar.R.structure.FloatLiteralExpr").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode floa = SNodeFactoryOperations.createNewNode(model, SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52bbL, "org.campagnelab.metar.R.structure.FloatLiteralExpr")), null);
            try {
              SPropertyOperations.set(floa, MetaAdapterFactory.getProperty(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52bbL, 0x11106e60089e7685L, "value"), pattern);
            } catch (NumberFormatException e) {
              SPropertyOperations.set(floa, MetaAdapterFactory.getProperty(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52bbL, 0x11106e60089e7685L, "value"), "0");
            }
            return floa;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            return REGEXP_x583g4_a0a0a2a0a0a0a2a0a2a2.matcher(pattern).matches();
          }
          public String getMatchingText(String pattern) {
            return pattern;
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52baL, "org.campagnelab.metar.R.structure.IntLiteralExpr").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode integer = SNodeFactoryOperations.createNewNode(model, SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52baL, "org.campagnelab.metar.R.structure.IntLiteralExpr")), null);
            try {
              SPropertyOperations.set(integer, MetaAdapterFactory.getProperty(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52baL, 0x11106e60089e7566L, "value"), "" + (Integer.parseInt(pattern)));
            } catch (NumberFormatException e) {
              SPropertyOperations.set(integer, MetaAdapterFactory.getProperty(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52baL, 0x11106e60089e7566L, "value"), "" + (0));
            }
            return integer;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            if (strictly) {
              return REGEXP_x583g4_a0a0a0a2a0a0a0a2a0a3a2.matcher(pattern).matches();
            } else {
              return REGEXP_x583g4_a0a0a0a0c0a0a0a0c0a0d0c.matcher(pattern).matches();
            }
          }
          public String getMatchingText(String pattern) {
            return pattern;
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_EmptyLine_1556967766010697961(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52b7L, "org.campagnelab.metar.R.structure.Identifier").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode a = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52b7L, "org.campagnelab.metar.R.structure.Identifier")));
            SPropertyOperations.set(a, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), pattern);
            return a;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            return Identifier_Behavior.call_isValidName_1556967766010699253(SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52b7L, "org.campagnelab.metar.R.structure.Identifier")), pattern);
          }
          public String getDescriptionText(String pattern) {
            return "> identifier";
          }
          public String getMatchingText(String pattern) {
            return pattern;
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expr_1556967766026038477(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x14d038586597da88L, "org.campagnelab.metar.R.structure.IdentifierRef").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return SNodeOperations.getNodeDescendants(SNodeOperations.getNodeAncestor(_context.getParentNode(), MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04afacdL, "org.campagnelab.metar.R.structure.Prog"), true, false), MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52b7L, "org.campagnelab.metar.R.structure.Identifier"), false, new SAbstractConcept[]{});
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode ref = SModelOperations.createNewNode(model, null, SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x14d038586597da88L, "org.campagnelab.metar.R.structure.IdentifierRef")));
                SLinkOperations.setTarget(ref, MetaAdapterFactory.getReferenceLink(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x14d038586597da88L, 0x14d0385865984963L, "id"), (item));
                return ref;
              }
              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString((item), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
              }
              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
              public String getDescriptionText(String pattern) {
                return "reference " + SPropertyOperations.getString((item), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
              }
            });
          }
        }
      }
    }
    return result;
  }
  public static boolean nodeSubstituteActionsBuilder_Precondition_Expr_8352544620134687553(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {

    if (LOG.isInfoEnabled()) {
      LOG.info("parent=" + _context.getParentNode() + " currentTarget=" + _context.getCurrentTargetNode());
    }
    boolean result = SNodeOperations.getConcept(_context.getCurrentTargetNode()) != MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b52b7L, "org.campagnelab.metar.R.structure.Identifier");
    if (LOG.isInfoEnabled()) {
      LOG.info("result=" + result);
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_Expr_489068675572566138(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<SAbstractConcept> parameterObjects = new Computable<Iterable<SAbstractConcept>>() {
        public Iterable<SAbstractConcept> compute() {
          return SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x6c9855e848f623cL, "org.campagnelab.metar.R.structure.BinaryOperator"), SNodeOperations.getModel(_context.getSourceNode()));
        }
      }.compute();
      if (parameterObjects != null) {
        for (final SAbstractConcept item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, "org.campagnelab.metar.R.structure.BinaryOperatorExpr").getDeclarationNode(), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              SNode newExp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, "org.campagnelab.metar.R.structure.BinaryOperatorExpr")));
              SLinkOperations.setTarget(newExp, MetaAdapterFactory.getContainmentLink(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, 0x6c9855e848f60fcL, "operator"), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept((item))));
              SNodeOperations.replaceWithAnother(_context.getSourceNode(), newExp);
              SLinkOperations.setTarget(newExp, MetaAdapterFactory.getContainmentLink(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, 0x56b22566c9bf4346L, "left"), _context.getSourceNode());
              editorContext.select(SLinkOperations.getTarget(newExp, MetaAdapterFactory.getContainmentLink(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, 0x56b22566c9bf4348L, "right")));
              return newExp;
            }
            public String getMatchingText(String pattern) {
              return SConceptOperations.conceptAlias((item));
            }
            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }
            public String getDescriptionText(String pattern) {
              return SConceptOperations.shortDescription((item));
            }
            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, "org.campagnelab.metar.R.structure.BinaryOperatorExpr").getDeclarationNode(), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, "org.campagnelab.metar.R.structure.BinaryOperatorExpr").getDeclarationNode(), null));
            }
          });
        }
      }
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_Expr_489068675572624973(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<SAbstractConcept> parameterObjects = new Computable<Iterable<SAbstractConcept>>() {
        public Iterable<SAbstractConcept> compute() {
          return SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x6c9855e848f623cL, "org.campagnelab.metar.R.structure.BinaryOperator"), SNodeOperations.getModel(_context.getSourceNode()));
        }
      }.compute();
      if (parameterObjects != null) {
        for (final SAbstractConcept item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, "org.campagnelab.metar.R.structure.BinaryOperatorExpr").getDeclarationNode(), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              SNode newExp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, "org.campagnelab.metar.R.structure.BinaryOperatorExpr")));
              SLinkOperations.setTarget(newExp, MetaAdapterFactory.getContainmentLink(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, 0x6c9855e848f60fcL, "operator"), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept((item))));
              SNodeOperations.replaceWithAnother(_context.getSourceNode(), newExp);
              SLinkOperations.setTarget(newExp, MetaAdapterFactory.getContainmentLink(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, 0x56b22566c9bf4348L, "right"), _context.getSourceNode());
              editorContext.select(SLinkOperations.getTarget(newExp, MetaAdapterFactory.getContainmentLink(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, 0x56b22566c9bf4346L, "left")));
              return newExp;
            }
            public String getMatchingText(String pattern) {
              return SConceptOperations.conceptAlias((item));
            }
            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }
            public String getDescriptionText(String pattern) {
              return SConceptOperations.shortDescription((item));
            }
            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, "org.campagnelab.metar.R.structure.BinaryOperatorExpr").getDeclarationNode(), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x56b22566c9bf4345L, "org.campagnelab.metar.R.structure.BinaryOperatorExpr").getDeclarationNode(), null));
            }
          });
        }
      }
    }
    return result;
  }
  public static List<SubstituteAction> sideTransform_ActionsFactory_Expr_489068675573293051(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<SAbstractConcept> parameterObjects = new Computable<Iterable<SAbstractConcept>>() {
        public Iterable<SAbstractConcept> compute() {
          return SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x195a5f84d681967fL, "org.campagnelab.metar.R.structure.UnaryOperator"), SNodeOperations.getModel(_context.getSourceNode()));
        }
      }.compute();
      if (parameterObjects != null) {
        for (final SAbstractConcept item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b529fL, "org.campagnelab.metar.R.structure.UnaryOperatorExpr").getDeclarationNode(), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              SNode newExp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b529fL, "org.campagnelab.metar.R.structure.UnaryOperatorExpr")));
              SLinkOperations.setTarget(newExp, MetaAdapterFactory.getContainmentLink(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b529fL, 0x6c9855e84baca07L, "operator"), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept((item))));
              SNodeOperations.replaceWithAnother(_context.getSourceNode(), newExp);
              SLinkOperations.setTarget(newExp, MetaAdapterFactory.getContainmentLink(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b529fL, 0x6c9855e84baca0aL, "expression"), _context.getSourceNode());
              return newExp;
            }
            public String getMatchingText(String pattern) {
              return SConceptOperations.conceptAlias((item));
            }
            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }
            public String getDescriptionText(String pattern) {
              return SConceptOperations.shortDescription((item));
            }
            @Override
            protected boolean isEnabled() {
              SNode sourceNode = getSourceNode();
              SNode parent = SNodeOperations.getParent(sourceNode);
              SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
              return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b529fL, "org.campagnelab.metar.R.structure.UnaryOperatorExpr").getDeclarationNode(), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, MetaAdapterFactory.getConcept(0x3b58810c84314bbbL, 0x99eab4671e02dd13L, 0x55b5a4eee04b529fL, "org.campagnelab.metar.R.structure.UnaryOperatorExpr").getDeclarationNode(), null));
            }
          });
        }
      }
    }
    return result;
  }
  protected static Logger LOG = LogManager.getLogger(QueriesGenerated.class);
  private static Pattern REGEXP_x583g4_a0a0a2a0a0a0a2a0a1a2 = Pattern.compile("-?[0-9]+i", 0);
  private static Pattern REGEXP_x583g4_a0a0a2a0a0a0a2a0a2a2 = Pattern.compile("-?[0-9]+\\.[0-9]*(?:[eE][\\-\\+]?[0-9]+)?", 0);
  private static Pattern REGEXP_x583g4_a0a0a0a2a0a0a0a2a0a3a2 = Pattern.compile("-?\\d+", 0);
  private static Pattern REGEXP_x583g4_a0a0a0a0c0a0a0a0c0a0d0c = Pattern.compile("-?\\d*", 0);
}
